# These substitutions allow the end user to override certain values
substitutions:
  name: "muino-water-meter"
  includes:
    - "my_custom_component.h"
  platformio_options:
    board_build.flash_mode: "qio"

esphome:
  name: "${name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: esphome.muino-water-meter
    version: "1.0.0"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

sensor:
  - platform: custom
    lambda: |-
      auto my_custom = new MyCustomSensor();
      App.register_component(my_custom);
      return {my_custom->water_liter_sensor, my_custom->sensa, my_custom->sensb, my_custom->sensc};

    sensors:
      - name: "water_liter_sensor"
        unit_of_measurement: L
        state_class: total_increasing
        device_class: water
        accuracy_decimals: 2
      - name: "sensa"
        accuracy_decimals: 2
      - name: "sensb"
        accuracy_decimals: 2
      - name: "sensc"
        accuracy_decimals: 2

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://martijnvwezel/watermeter-esphome/muino-water-meter-esp32.yaml@main

wifi:
  # Set up a wifi access point using the device name above
  ap:
    password: "12345678"

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

##########################################################
# Most projects should not remove anything from above here
# and should just modify the name, project name/version 
# and git url for the dashboard_import
##########################################################


# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning.
# Handy if your device has a usb port for the user to add credentials when they first get it.
improv_serial:
