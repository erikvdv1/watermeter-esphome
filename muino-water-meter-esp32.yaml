# These substitutions allow the end user to override certain values
substitutions:
  name: "muino-water-meter"

# platformio_options:
#   board_build.flash_mode: "qio"

esphome:
  name: "${name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true
  # includes:
  #   - my_custom_component.h

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: esphome.muino-water-meter
    version: "1.1.0"

esp32:
  board: seeed_xiao_esp32c3 # esp32-c3-devkitm-1
  framework:
    type: arduino


globals:
  - id: polling_time_sec
    type: int
     # 5*60 = 5min
    initial_value: "300"

sensor:
  - platform: custom
    lambda: |-
      auto my_custom = new MyCustomSensor();
      App.register_component(my_custom);
      return {my_custom->water_liter_sensor, my_custom->sensa, my_custom->sensb, my_custom->sensc};

    sensors:
      - name: "water_liter_sensor"
        unit_of_measurement: L
        state_class: total_increasing
        device_class: water
        accuracy_decimals: 2
      - name: "sensa"
        accuracy_decimals: 2
      - name: "sensb"
        accuracy_decimals: 2
      - name: "sensc"
        accuracy_decimals: 2

# To be able to get logs from the device via serial and api.
# logger:
#   hardware_uart: UART1
logger:
  level: NONE
# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://martijnvwezel/watermeter-esphome/muino-water-meter-esp32.yaml@main
  


external_components:
  - source:  github://martijnvwezel/watermeter-esphome
    components: 
      - my_custom_component.h
wifi:
  # Set up a wifi access point using the device name above
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning.
# Handy if your device has a usb port for the user to add credentials when they first get it.
improv_serial:
